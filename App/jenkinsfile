pipeline {
    agent any

    environment {
        
        DOCKER_REGISTRY = "salmamakram"
        DOCKER_IMAGE = "spring-boot"
        imageTagApp = "build-${BUILD_NUMBER}-app"
        imageNameapp = "${DOCKER_REGISTRY}:${imageTagApp}"
        OPENSHIFT_PROJECT = 'salmamakram'
        GITHUB_REPO = "Salmamohamedm/MultiCloudDevOpsProject"
        OPENSHIFT_SERVER = 'https://api.ocpuat.devopsconsulting.org:6443'
        APP_SERVICE_NAME = 'springboot1'
        APP_PORT = '8080'
        APP_HOST_NAME = 'springboot1.apps.ocpuat.devopsconsulting.org'
        SONAR_PROJECT_KEY = 'CloudDevOpsProject '
        SONAR_SERVER_URL = 'http://44.210.126.194:9000'
        
    }

    stages {
        
        
        stage('Checkout') {
            steps {
                git url: "https://github.com/${GITHUB_REPO}.git", branch: 'main'
            }
        }
        
        
        stage('Build Docker image and push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_REGISTRY_USERNAME', passwordVariable: 'DOCKER_REGISTRY_PASSWORD')]) {
                    script {
                        try {
                            sh "echo \${DOCKER_REGISTRY_PASSWORD} | docker login -u \${DOCKER_REGISTRY_USERNAME} --password-stdin"
                            sh "docker build -t ${imageNameapp} ."
                            sh "docker tag ${imageNameapp} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${imageTagApp}"
                            sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${imageTagApp}"
                        } finally {
                            // Clean up even if the build or push fails
                            sh "docker rmi -f ${imageNameapp}"
                        }
                    }
                }
            }
        }


         stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                    script {
                        // Run SonarQube analysis
                       // sh "chmod +x./gradlew sonar -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.host.url=${SONAR_SERVER_URL} -Dsonar.login=${SONAR_TOKEN} -Dsonar.scm.provider=git"
                        // Grant execute permissions to the gradlew script
                         sh 'chmod +x /var/lib/jenkins/workspace/deployAndTestMultiCloudPipeline/gradlew'

                          // Run the gradlew script with SonarQube analysis
                          sh "/var/lib/jenkins/workspace/deployAndTestMultiCloudPipeline/gradlew sonar -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.host.url=${SONAR_SERVER_URL} -Dsonar.login=${SONAR_TOKEN} -Dsonar.scm.provider=git"
                    }
                }
            }
        }


        stage('Deploy to OpenShift') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'openshift-token', variable: 'OPENSHIFT_SECRET')]) {
                    sh "oc login --token=\${OPENSHIFT_SECRET} --server=\${OPENSHIFT_SERVER} --insecure-skip-tls-verify"
                    }
                    sh "oc project \${OPENSHIFT_PROJECT}"
                    //sh "oc delete dc,svc,deploy,ingress,route \${DOCKER_IMAGE} || true"
                    sh "oc new-app ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${imageTagApp} --token=\${OPENSHIFT_SECRET}"
                    
                    // Expose the service 
                    sh "oc create service clusterip ${APP_SERVICE_NAME} --tcp=8080:8080 "
                    sh " oc expose service/${APP_SERVICE_NAME}"
                    
                    //sh "oc create route edge --service \${APP_SERVICE_NAME} --port \${APP_PORT} --hostname springboot.apps.ocpuat.devopsconsulting.org --insecure-policy Redirect"

                }
            }
        }
    }
}
